import { infiniteQueryOptions, queryOptions } from "@tanstack/react-query"

import type { InfiniteData, UseMutationOptions } from "@tanstack/react-query"
import type { Options } from "../sdk.gen"
import type {
  FileControllerUploadFileData,
  FileControllerUploadFileError,
  FileControllerUploadFileResponse,
  FileControllerUploadFilesData,
  FileControllerUploadFilesError,
  FileControllerUploadFilesResponse,
  HealthControllerCheckData,
  PrometheusControllerIndexData,
  TikTokControllerDisconnectShopData,
  TikTokControllerDisconnectShopError,
  TikTokControllerGetAuthStatusData,
  TikTokControllerGetShopInfoData,
  TikTokControllerHandleCallbackData,
  TikTokControllerHandleCallbackError,
  TikTokControllerHandleCallbackResponse,
  TikTokControllerInitiateAuthData,
  TikTokControllerRefreshTokenData,
  TikTokControllerRefreshTokenError,
  TikTokControllerRefreshTokenResponse,
  UserControllerDeleteUserData,
  UserControllerDeleteUserError,
  UserControllerFindAllUsersCursorData,
  UserControllerFindAllUsersData,
  UserControllerFindAllUsersError,
  UserControllerFindAllUsersResponse,
  UserControllerFindUserData,
  UserControllerGetCurrentUserData,
  UserControllerUpdateUserProfileData,
  UserControllerUpdateUserProfileError,
  UserControllerUpdateUserProfileResponse,
} from "../types.gen"

import { client as _heyApiClient } from "../client.gen"
import {
  fileControllerUploadFile,
  fileControllerUploadFiles,
  healthControllerCheck,
  prometheusControllerIndex,
  tikTokControllerDisconnectShop,
  tikTokControllerGetAuthStatus,
  tikTokControllerGetShopInfo,
  tikTokControllerHandleCallback,
  tikTokControllerInitiateAuth,
  tikTokControllerRefreshToken,
  userControllerDeleteUser,
  userControllerFindAllUsers,
  userControllerFindAllUsersCursor,
  userControllerFindUser,
  userControllerGetCurrentUser,
  userControllerUpdateUserProfile,
} from "../sdk.gen"

// This file is auto-generated by @hey-api/openapi-ts

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string
    _infinite?: boolean
    tags?: ReadonlyArray<string>
  },
]

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
  tags?: ReadonlyArray<string>
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl:
      options?.baseUrl ||
      (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0]
  if (infinite) {
    params._infinite = infinite
  }
  if (tags) {
    params.tags = tags
  }
  if (options?.body) {
    params.body = options.body
  }
  if (options?.headers) {
    params.headers = options.headers
  }
  if (options?.path) {
    params.path = options.path
  }
  if (options?.query) {
    params.query = options.query
  }
  return [params]
}

export const prometheusControllerIndexQueryKey = (
  options?: Options<PrometheusControllerIndexData>
) => createQueryKey("prometheusControllerIndex", options)

export const prometheusControllerIndexOptions = (
  options?: Options<PrometheusControllerIndexData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await prometheusControllerIndex({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: prometheusControllerIndexQueryKey(options),
  })
}

export const healthControllerCheckQueryKey = (
  options?: Options<HealthControllerCheckData>
) => createQueryKey("healthControllerCheck", options)

/**
 * Health check
 */
export const healthControllerCheckOptions = (
  options?: Options<HealthControllerCheckData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await healthControllerCheck({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: healthControllerCheckQueryKey(options),
  })
}

export const userControllerGetCurrentUserQueryKey = (
  options?: Options<UserControllerGetCurrentUserData>
) => createQueryKey("userControllerGetCurrentUser", options)

/**
 * Get current user
 */
export const userControllerGetCurrentUserOptions = (
  options?: Options<UserControllerGetCurrentUserData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userControllerGetCurrentUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: userControllerGetCurrentUserQueryKey(options),
  })
}

export const userControllerFindAllUsersQueryKey = (
  options?: Options<UserControllerFindAllUsersData>
) => createQueryKey("userControllerFindAllUsers", options)

/**
 * List users.
 */
export const userControllerFindAllUsersOptions = (
  options?: Options<UserControllerFindAllUsersData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userControllerFindAllUsers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: userControllerFindAllUsersQueryKey(options),
  })
}

const createInfiniteParams = <
  K extends Pick<QueryKey<Options>[0], "body" | "headers" | "path" | "query">,
>(
  queryKey: QueryKey<Options>,
  page: K
) => {
  const params = {
    ...queryKey[0],
  }
  if (page.body) {
    params.body = {
      ...(queryKey[0].body as any),
      ...(page.body as any),
    }
  }
  if (page.headers) {
    params.headers = {
      ...queryKey[0].headers,
      ...page.headers,
    }
  }
  if (page.path) {
    params.path = {
      ...(queryKey[0].path as any),
      ...(page.path as any),
    }
  }
  if (page.query) {
    params.query = {
      ...(queryKey[0].query as any),
      ...(page.query as any),
    }
  }
  return params as unknown as typeof page
}

export const userControllerFindAllUsersInfiniteQueryKey = (
  options?: Options<UserControllerFindAllUsersData>
): QueryKey<Options<UserControllerFindAllUsersData>> =>
  createQueryKey("userControllerFindAllUsers", options, true)

/**
 * List users.
 */
export const userControllerFindAllUsersInfiniteOptions = (
  options?: Options<UserControllerFindAllUsersData>
) => {
  return infiniteQueryOptions<
    UserControllerFindAllUsersResponse,
    UserControllerFindAllUsersError,
    InfiniteData<UserControllerFindAllUsersResponse>,
    QueryKey<Options<UserControllerFindAllUsersData>>,
    | number
    | Pick<
        QueryKey<Options<UserControllerFindAllUsersData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<UserControllerFindAllUsersData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              }
        const params = createInfiniteParams(queryKey, page)
        const { data } = await userControllerFindAllUsers({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        })
        return data
      },
      queryKey: userControllerFindAllUsersInfiniteQueryKey(options),
    }
  )
}

export const userControllerFindAllUsersCursorQueryKey = (
  options?: Options<UserControllerFindAllUsersCursorData>
) => createQueryKey("userControllerFindAllUsersCursor", options)

/**
 * List users via cursor.
 */
export const userControllerFindAllUsersCursorOptions = (
  options?: Options<UserControllerFindAllUsersCursorData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userControllerFindAllUsersCursor({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: userControllerFindAllUsersCursorQueryKey(options),
  })
}

/**
 * Delete a user
 */
export const userControllerDeleteUserMutation = (
  options?: Partial<Options<UserControllerDeleteUserData>>
): UseMutationOptions<
  unknown,
  UserControllerDeleteUserError,
  Options<UserControllerDeleteUserData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    UserControllerDeleteUserError,
    Options<UserControllerDeleteUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await userControllerDeleteUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const userControllerFindUserQueryKey = (
  options: Options<UserControllerFindUserData>
) => createQueryKey("userControllerFindUser", options)

/**
 * Find user by id
 */
export const userControllerFindUserOptions = (
  options: Options<UserControllerFindUserData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userControllerFindUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: userControllerFindUserQueryKey(options),
  })
}

/**
 * Update user's profile
 */
export const userControllerUpdateUserProfileMutation = (
  options?: Partial<Options<UserControllerUpdateUserProfileData>>
): UseMutationOptions<
  UserControllerUpdateUserProfileResponse,
  UserControllerUpdateUserProfileError,
  Options<UserControllerUpdateUserProfileData>
> => {
  const mutationOptions: UseMutationOptions<
    UserControllerUpdateUserProfileResponse,
    UserControllerUpdateUserProfileError,
    Options<UserControllerUpdateUserProfileData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await userControllerUpdateUserProfile({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const fileControllerUploadFileQueryKey = (
  options: Options<FileControllerUploadFileData>
) => createQueryKey("fileControllerUploadFile", options)

/**
 * Uploads a single file
 */
export const fileControllerUploadFileOptions = (
  options: Options<FileControllerUploadFileData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fileControllerUploadFile({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: fileControllerUploadFileQueryKey(options),
  })
}

/**
 * Uploads a single file
 */
export const fileControllerUploadFileMutation = (
  options?: Partial<Options<FileControllerUploadFileData>>
): UseMutationOptions<
  FileControllerUploadFileResponse,
  FileControllerUploadFileError,
  Options<FileControllerUploadFileData>
> => {
  const mutationOptions: UseMutationOptions<
    FileControllerUploadFileResponse,
    FileControllerUploadFileError,
    Options<FileControllerUploadFileData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await fileControllerUploadFile({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const fileControllerUploadFilesQueryKey = (
  options: Options<FileControllerUploadFilesData>
) => createQueryKey("fileControllerUploadFiles", options)

/**
 * Uploads multiple files
 */
export const fileControllerUploadFilesOptions = (
  options: Options<FileControllerUploadFilesData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fileControllerUploadFiles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: fileControllerUploadFilesQueryKey(options),
  })
}

/**
 * Uploads multiple files
 */
export const fileControllerUploadFilesMutation = (
  options?: Partial<Options<FileControllerUploadFilesData>>
): UseMutationOptions<
  FileControllerUploadFilesResponse,
  FileControllerUploadFilesError,
  Options<FileControllerUploadFilesData>
> => {
  const mutationOptions: UseMutationOptions<
    FileControllerUploadFilesResponse,
    FileControllerUploadFilesError,
    Options<FileControllerUploadFilesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await fileControllerUploadFiles({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const tikTokControllerInitiateAuthQueryKey = (
  options?: Options<TikTokControllerInitiateAuthData>
) => createQueryKey("tikTokControllerInitiateAuth", options)

/**
 * Initiate TikTok Shop authorization
 */
export const tikTokControllerInitiateAuthOptions = (
  options?: Options<TikTokControllerInitiateAuthData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tikTokControllerInitiateAuth({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: tikTokControllerInitiateAuthQueryKey(options),
  })
}

export const tikTokControllerHandleCallbackQueryKey = (
  options: Options<TikTokControllerHandleCallbackData>
) => createQueryKey("tikTokControllerHandleCallback", options)

/**
 * Handle TikTok Shop OAuth callback
 */
export const tikTokControllerHandleCallbackOptions = (
  options: Options<TikTokControllerHandleCallbackData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tikTokControllerHandleCallback({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: tikTokControllerHandleCallbackQueryKey(options),
  })
}

/**
 * Handle TikTok Shop OAuth callback
 */
export const tikTokControllerHandleCallbackMutation = (
  options?: Partial<Options<TikTokControllerHandleCallbackData>>
): UseMutationOptions<
  TikTokControllerHandleCallbackResponse,
  TikTokControllerHandleCallbackError,
  Options<TikTokControllerHandleCallbackData>
> => {
  const mutationOptions: UseMutationOptions<
    TikTokControllerHandleCallbackResponse,
    TikTokControllerHandleCallbackError,
    Options<TikTokControllerHandleCallbackData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tikTokControllerHandleCallback({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const tikTokControllerGetShopInfoQueryKey = (
  options?: Options<TikTokControllerGetShopInfoData>
) => createQueryKey("tikTokControllerGetShopInfo", options)

/**
 * Get connected TikTok Shop information
 */
export const tikTokControllerGetShopInfoOptions = (
  options?: Options<TikTokControllerGetShopInfoData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tikTokControllerGetShopInfo({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: tikTokControllerGetShopInfoQueryKey(options),
  })
}

/**
 * Disconnect TikTok Shop
 */
export const tikTokControllerDisconnectShopMutation = (
  options?: Partial<Options<TikTokControllerDisconnectShopData>>
): UseMutationOptions<
  unknown,
  TikTokControllerDisconnectShopError,
  Options<TikTokControllerDisconnectShopData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    TikTokControllerDisconnectShopError,
    Options<TikTokControllerDisconnectShopData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tikTokControllerDisconnectShop({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const tikTokControllerRefreshTokenQueryKey = (
  options?: Options<TikTokControllerRefreshTokenData>
) => createQueryKey("tikTokControllerRefreshToken", options)

/**
 * Refresh TikTok Shop access token
 */
export const tikTokControllerRefreshTokenOptions = (
  options?: Options<TikTokControllerRefreshTokenData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tikTokControllerRefreshToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: tikTokControllerRefreshTokenQueryKey(options),
  })
}

/**
 * Refresh TikTok Shop access token
 */
export const tikTokControllerRefreshTokenMutation = (
  options?: Partial<Options<TikTokControllerRefreshTokenData>>
): UseMutationOptions<
  TikTokControllerRefreshTokenResponse,
  TikTokControllerRefreshTokenError,
  Options<TikTokControllerRefreshTokenData>
> => {
  const mutationOptions: UseMutationOptions<
    TikTokControllerRefreshTokenResponse,
    TikTokControllerRefreshTokenError,
    Options<TikTokControllerRefreshTokenData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tikTokControllerRefreshToken({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const tikTokControllerGetAuthStatusQueryKey = (
  options?: Options<TikTokControllerGetAuthStatusData>
) => createQueryKey("tikTokControllerGetAuthStatus", options)

/**
 * Get authorization status
 * Check if user has an active TikTok Shop connection
 */
export const tikTokControllerGetAuthStatusOptions = (
  options?: Options<TikTokControllerGetAuthStatusData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tikTokControllerGetAuthStatus({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: tikTokControllerGetAuthStatusQueryKey(options),
  })
}
